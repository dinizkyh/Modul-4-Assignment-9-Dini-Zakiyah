{
  "version": 3,
  "sources": ["browser-external:node:buffer", "browser-external:node:crypto", "browser-external:node:net", "../../express-rate-limit/dist/index.mjs"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:buffer\" has been externalized for browser compatibility. Cannot access \"node:buffer.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:crypto\" has been externalized for browser compatibility. Cannot access \"node:crypto.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:net\" has been externalized for browser compatibility. Cannot access \"node:net.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// source/headers.ts\nimport { Buffer } from \"node:buffer\";\nimport { createHash } from \"node:crypto\";\nvar SUPPORTED_DRAFT_VERSIONS = [\n  \"draft-6\",\n  \"draft-7\",\n  \"draft-8\"\n];\nvar getResetSeconds = (resetTime, windowMs) => {\n  let resetSeconds = void 0;\n  if (resetTime) {\n    const deltaSeconds = Math.ceil((resetTime.getTime() - Date.now()) / 1e3);\n    resetSeconds = Math.max(0, deltaSeconds);\n  } else if (windowMs) {\n    resetSeconds = Math.ceil(windowMs / 1e3);\n  }\n  return resetSeconds;\n};\nvar getPartitionKey = (key) => {\n  const hash = createHash(\"sha256\");\n  hash.update(key);\n  const partitionKey = hash.digest(\"hex\").slice(0, 12);\n  return Buffer.from(partitionKey).toString(\"base64\");\n};\nvar setLegacyHeaders = (response, info) => {\n  if (response.headersSent) return;\n  response.setHeader(\"X-RateLimit-Limit\", info.limit.toString());\n  response.setHeader(\"X-RateLimit-Remaining\", info.remaining.toString());\n  if (info.resetTime instanceof Date) {\n    response.setHeader(\"Date\", (/* @__PURE__ */ new Date()).toUTCString());\n    response.setHeader(\n      \"X-RateLimit-Reset\",\n      Math.ceil(info.resetTime.getTime() / 1e3).toString()\n    );\n  }\n};\nvar setDraft6Headers = (response, info, windowMs) => {\n  if (response.headersSent) return;\n  const windowSeconds = Math.ceil(windowMs / 1e3);\n  const resetSeconds = getResetSeconds(info.resetTime);\n  response.setHeader(\"RateLimit-Policy\", `${info.limit};w=${windowSeconds}`);\n  response.setHeader(\"RateLimit-Limit\", info.limit.toString());\n  response.setHeader(\"RateLimit-Remaining\", info.remaining.toString());\n  if (resetSeconds)\n    response.setHeader(\"RateLimit-Reset\", resetSeconds.toString());\n};\nvar setDraft7Headers = (response, info, windowMs) => {\n  if (response.headersSent) return;\n  const windowSeconds = Math.ceil(windowMs / 1e3);\n  const resetSeconds = getResetSeconds(info.resetTime, windowMs);\n  response.setHeader(\"RateLimit-Policy\", `${info.limit};w=${windowSeconds}`);\n  response.setHeader(\n    \"RateLimit\",\n    `limit=${info.limit}, remaining=${info.remaining}, reset=${resetSeconds}`\n  );\n};\nvar setDraft8Headers = (response, info, windowMs, name, key) => {\n  if (response.headersSent) return;\n  const windowSeconds = Math.ceil(windowMs / 1e3);\n  const resetSeconds = getResetSeconds(info.resetTime, windowMs);\n  const partitionKey = getPartitionKey(key);\n  const policy = `q=${info.limit}; w=${windowSeconds}; pk=:${partitionKey}:`;\n  const header = `r=${info.remaining}; t=${resetSeconds}`;\n  response.append(\"RateLimit-Policy\", `\"${name}\"; ${policy}`);\n  response.append(\"RateLimit\", `\"${name}\"; ${header}`);\n};\nvar setRetryAfterHeader = (response, info, windowMs) => {\n  if (response.headersSent) return;\n  const resetSeconds = getResetSeconds(info.resetTime, windowMs);\n  response.setHeader(\"Retry-After\", resetSeconds.toString());\n};\n\n// source/validations.ts\nimport { isIP } from \"node:net\";\nvar ValidationError = class extends Error {\n  /**\n   * The code must be a string, in snake case and all capital, that starts with\n   * the substring `ERR_ERL_`.\n   *\n   * The message must be a string, starting with an uppercase character,\n   * describing the issue in detail.\n   */\n  constructor(code, message) {\n    const url = `https://express-rate-limit.github.io/${code}/`;\n    super(`${message} See ${url} for more information.`);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.help = url;\n  }\n};\nvar ChangeWarning = class extends ValidationError {\n};\nvar usedStores = /* @__PURE__ */ new Set();\nvar singleCountKeys = /* @__PURE__ */ new WeakMap();\nvar validations = {\n  // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n  enabled: {\n    default: true\n  },\n  // Should be EnabledValidations type, but that's a circular reference\n  disable() {\n    for (const k of Object.keys(this.enabled)) this.enabled[k] = false;\n  },\n  /**\n   * Checks whether the IP address is valid, and that it does not have a port\n   * number in it.\n   *\n   * See https://github.com/express-rate-limit/express-rate-limit/wiki/Error-Codes#err_erl_invalid_ip_address.\n   *\n   * @param ip {string | undefined} - The IP address provided by Express as request.ip.\n   *\n   * @returns {void}\n   */\n  ip(ip) {\n    if (ip === void 0) {\n      throw new ValidationError(\n        \"ERR_ERL_UNDEFINED_IP_ADDRESS\",\n        `An undefined 'request.ip' was detected. This might indicate a misconfiguration or the connection being destroyed prematurely.`\n      );\n    }\n    if (!isIP(ip)) {\n      throw new ValidationError(\n        \"ERR_ERL_INVALID_IP_ADDRESS\",\n        `An invalid 'request.ip' (${ip}) was detected. Consider passing a custom 'keyGenerator' function to the rate limiter.`\n      );\n    }\n  },\n  /**\n   * Makes sure the trust proxy setting is not set to `true`.\n   *\n   * See https://github.com/express-rate-limit/express-rate-limit/wiki/Error-Codes#err_erl_permissive_trust_proxy.\n   *\n   * @param request {Request} - The Express request object.\n   *\n   * @returns {void}\n   */\n  trustProxy(request) {\n    if (request.app.get(\"trust proxy\") === true) {\n      throw new ValidationError(\n        \"ERR_ERL_PERMISSIVE_TRUST_PROXY\",\n        `The Express 'trust proxy' setting is true, which allows anyone to trivially bypass IP-based rate limiting.`\n      );\n    }\n  },\n  /**\n   * Makes sure the trust proxy setting is set in case the `X-Forwarded-For`\n   * header is present.\n   *\n   * See https://github.com/express-rate-limit/express-rate-limit/wiki/Error-Codes#err_erl_unset_trust_proxy.\n   *\n   * @param request {Request} - The Express request object.\n   *\n   * @returns {void}\n   */\n  xForwardedForHeader(request) {\n    if (request.headers[\"x-forwarded-for\"] && request.app.get(\"trust proxy\") === false) {\n      throw new ValidationError(\n        \"ERR_ERL_UNEXPECTED_X_FORWARDED_FOR\",\n        `The 'X-Forwarded-For' header is set but the Express 'trust proxy' setting is false (default). This could indicate a misconfiguration which would prevent express-rate-limit from accurately identifying users.`\n      );\n    }\n  },\n  /**\n   * Ensures totalHits value from store is a positive integer.\n   *\n   * @param hits {any} - The `totalHits` returned by the store.\n   */\n  positiveHits(hits) {\n    if (typeof hits !== \"number\" || hits < 1 || hits !== Math.round(hits)) {\n      throw new ValidationError(\n        \"ERR_ERL_INVALID_HITS\",\n        `The totalHits value returned from the store must be a positive integer, got ${hits}`\n      );\n    }\n  },\n  /**\n   * Ensures a single store instance is not used with multiple express-rate-limit instances\n   */\n  unsharedStore(store) {\n    if (usedStores.has(store)) {\n      const maybeUniquePrefix = store?.localKeys ? \"\" : \" (with a unique prefix)\";\n      throw new ValidationError(\n        \"ERR_ERL_STORE_REUSE\",\n        `A Store instance must not be shared across multiple rate limiters. Create a new instance of ${store.constructor.name}${maybeUniquePrefix} for each limiter instead.`\n      );\n    }\n    usedStores.add(store);\n  },\n  /**\n   * Ensures a given key is incremented only once per request.\n   *\n   * @param request {Request} - The Express request object.\n   * @param store {Store} - The store class.\n   * @param key {string} - The key used to store the client's hit count.\n   *\n   * @returns {void}\n   */\n  singleCount(request, store, key) {\n    let storeKeys = singleCountKeys.get(request);\n    if (!storeKeys) {\n      storeKeys = /* @__PURE__ */ new Map();\n      singleCountKeys.set(request, storeKeys);\n    }\n    const storeKey = store.localKeys ? store : store.constructor.name;\n    let keys = storeKeys.get(storeKey);\n    if (!keys) {\n      keys = [];\n      storeKeys.set(storeKey, keys);\n    }\n    const prefixedKey = `${store.prefix ?? \"\"}${key}`;\n    if (keys.includes(prefixedKey)) {\n      throw new ValidationError(\n        \"ERR_ERL_DOUBLE_COUNT\",\n        `The hit count for ${key} was incremented more than once for a single request.`\n      );\n    }\n    keys.push(prefixedKey);\n  },\n  /**\n   * Warns the user that the behaviour for `max: 0` / `limit: 0` is\n   * changing in the next major release.\n   *\n   * @param limit {number} - The maximum number of hits per client.\n   *\n   * @returns {void}\n   */\n  limit(limit) {\n    if (limit === 0) {\n      throw new ChangeWarning(\n        \"WRN_ERL_MAX_ZERO\",\n        `Setting limit or max to 0 disables rate limiting in express-rate-limit v6 and older, but will cause all requests to be blocked in v7`\n      );\n    }\n  },\n  /**\n   * Warns the user that the `draft_polli_ratelimit_headers` option is deprecated\n   * and will be removed in the next major release.\n   *\n   * @param draft_polli_ratelimit_headers {any | undefined} - The now-deprecated setting that was used to enable standard headers.\n   *\n   * @returns {void}\n   */\n  draftPolliHeaders(draft_polli_ratelimit_headers) {\n    if (draft_polli_ratelimit_headers) {\n      throw new ChangeWarning(\n        \"WRN_ERL_DEPRECATED_DRAFT_POLLI_HEADERS\",\n        `The draft_polli_ratelimit_headers configuration option is deprecated and has been removed in express-rate-limit v7, please set standardHeaders: 'draft-6' instead.`\n      );\n    }\n  },\n  /**\n   * Warns the user that the `onLimitReached` option is deprecated and\n   * will be removed in the next major release.\n   *\n   * @param onLimitReached {any | undefined} - The maximum number of hits per client.\n   *\n   * @returns {void}\n   */\n  onLimitReached(onLimitReached) {\n    if (onLimitReached) {\n      throw new ChangeWarning(\n        \"WRN_ERL_DEPRECATED_ON_LIMIT_REACHED\",\n        `The onLimitReached configuration option is deprecated and has been removed in express-rate-limit v7.`\n      );\n    }\n  },\n  /**\n   * Warns the user when an invalid/unsupported version of the draft spec is passed.\n   *\n   * @param version {any | undefined} - The version passed by the user.\n   *\n   * @returns {void}\n   */\n  headersDraftVersion(version) {\n    if (typeof version !== \"string\" || // @ts-expect-error This is fine. If version is not in the array, it will just return false.\n    !SUPPORTED_DRAFT_VERSIONS.includes(version)) {\n      const versionString = SUPPORTED_DRAFT_VERSIONS.join(\", \");\n      throw new ValidationError(\n        \"ERR_ERL_HEADERS_UNSUPPORTED_DRAFT_VERSION\",\n        `standardHeaders: only the following versions of the IETF draft specification are supported: ${versionString}.`\n      );\n    }\n  },\n  /**\n   * Warns the user when the selected headers option requires a reset time but\n   * the store does not provide one.\n   *\n   * @param resetTime {Date | undefined} - The timestamp when the client's hit count will be reset.\n   *\n   * @returns {void}\n   */\n  headersResetTime(resetTime) {\n    if (!resetTime) {\n      throw new ValidationError(\n        \"ERR_ERL_HEADERS_NO_RESET\",\n        `standardHeaders:  'draft-7' requires a 'resetTime', but the store did not provide one. The 'windowMs' value will be used instead, which may cause clients to wait longer than necessary.`\n      );\n    }\n  },\n  /**\n   * Checks the options.validate setting to ensure that only recognized\n   * validations are enabled or disabled.\n   *\n   * If any unrecognized values are found, an error is logged that\n   * includes the list of supported vaidations.\n   */\n  validationsConfig() {\n    const supportedValidations = Object.keys(this).filter(\n      (k) => ![\"enabled\", \"disable\"].includes(k)\n    );\n    supportedValidations.push(\"default\");\n    for (const key of Object.keys(this.enabled)) {\n      if (!supportedValidations.includes(key)) {\n        throw new ValidationError(\n          \"ERR_ERL_UNKNOWN_VALIDATION\",\n          `options.validate.${key} is not recognized. Supported validate options are: ${supportedValidations.join(\n            \", \"\n          )}.`\n        );\n      }\n    }\n  },\n  /**\n   * Checks to see if the instance was created inside of a request handler,\n   * which would prevent it from working correctly, with the default memory\n   * store (or any other store with localKeys.)\n   */\n  creationStack(store) {\n    const { stack } = new Error(\n      \"express-rate-limit validation check (set options.validate.creationStack=false to disable)\"\n    );\n    if (stack?.includes(\"Layer.handle [as handle_request]\")) {\n      if (!store.localKeys) {\n        throw new ValidationError(\n          \"ERR_ERL_CREATED_IN_REQUEST_HANDLER\",\n          \"express-rate-limit instance should *usually* be created at app initialization, not when responding to a request.\"\n        );\n      }\n      throw new ValidationError(\n        \"ERR_ERL_CREATED_IN_REQUEST_HANDLER\",\n        `express-rate-limit instance should be created at app initialization, not when responding to a request.`\n      );\n    }\n  }\n};\nvar getValidations = (_enabled) => {\n  let enabled;\n  if (typeof _enabled === \"boolean\") {\n    enabled = {\n      default: _enabled\n    };\n  } else {\n    enabled = {\n      default: true,\n      ..._enabled\n    };\n  }\n  const wrappedValidations = {\n    enabled\n  };\n  for (const [name, validation] of Object.entries(validations)) {\n    if (typeof validation === \"function\")\n      wrappedValidations[name] = (...args) => {\n        if (!(enabled[name] ?? enabled.default)) {\n          return;\n        }\n        try {\n          ;\n          validation.apply(\n            wrappedValidations,\n            args\n          );\n        } catch (error) {\n          if (error instanceof ChangeWarning) console.warn(error);\n          else console.error(error);\n        }\n      };\n  }\n  return wrappedValidations;\n};\n\n// source/memory-store.ts\nvar MemoryStore = class {\n  constructor() {\n    /**\n     * These two maps store usage (requests) and reset time by key (for example, IP\n     * addresses or API keys).\n     *\n     * They are split into two to avoid having to iterate through the entire set to\n     * determine which ones need reset. Instead, `Client`s are moved from `previous`\n     * to `current` as they hit the endpoint. Once `windowMs` has elapsed, all clients\n     * left in `previous`, i.e., those that have not made any recent requests, are\n     * known to be expired and can be deleted in bulk.\n     */\n    this.previous = /* @__PURE__ */ new Map();\n    this.current = /* @__PURE__ */ new Map();\n    /**\n     * Confirmation that the keys incremented in once instance of MemoryStore\n     * cannot affect other instances.\n     */\n    this.localKeys = true;\n  }\n  /**\n   * Method that initializes the store.\n   *\n   * @param options {Options} - The options used to setup the middleware.\n   */\n  init(options) {\n    this.windowMs = options.windowMs;\n    if (this.interval) clearInterval(this.interval);\n    this.interval = setInterval(() => {\n      this.clearExpired();\n    }, this.windowMs);\n    if (this.interval.unref) this.interval.unref();\n  }\n  /**\n   * Method to fetch a client's hit count and reset time.\n   *\n   * @param key {string} - The identifier for a client.\n   *\n   * @returns {ClientRateLimitInfo | undefined} - The number of hits and reset time for that client.\n   *\n   * @public\n   */\n  async get(key) {\n    return this.current.get(key) ?? this.previous.get(key);\n  }\n  /**\n   * Method to increment a client's hit counter.\n   *\n   * @param key {string} - The identifier for a client.\n   *\n   * @returns {ClientRateLimitInfo} - The number of hits and reset time for that client.\n   *\n   * @public\n   */\n  async increment(key) {\n    const client = this.getClient(key);\n    const now = Date.now();\n    if (client.resetTime.getTime() <= now) {\n      this.resetClient(client, now);\n    }\n    client.totalHits++;\n    return client;\n  }\n  /**\n   * Method to decrement a client's hit counter.\n   *\n   * @param key {string} - The identifier for a client.\n   *\n   * @public\n   */\n  async decrement(key) {\n    const client = this.getClient(key);\n    if (client.totalHits > 0) client.totalHits--;\n  }\n  /**\n   * Method to reset a client's hit counter.\n   *\n   * @param key {string} - The identifier for a client.\n   *\n   * @public\n   */\n  async resetKey(key) {\n    this.current.delete(key);\n    this.previous.delete(key);\n  }\n  /**\n   * Method to reset everyone's hit counter.\n   *\n   * @public\n   */\n  async resetAll() {\n    this.current.clear();\n    this.previous.clear();\n  }\n  /**\n   * Method to stop the timer (if currently running) and prevent any memory\n   * leaks.\n   *\n   * @public\n   */\n  shutdown() {\n    clearInterval(this.interval);\n    void this.resetAll();\n  }\n  /**\n   * Recycles a client by setting its hit count to zero, and reset time to\n   * `windowMs` milliseconds from now.\n   *\n   * NOT to be confused with `#resetKey()`, which removes a client from both the\n   * `current` and `previous` maps.\n   *\n   * @param client {Client} - The client to recycle.\n   * @param now {number} - The current time, to which the `windowMs` is added to get the `resetTime` for the client.\n   *\n   * @return {Client} - The modified client that was passed in, to allow for chaining.\n   */\n  resetClient(client, now = Date.now()) {\n    client.totalHits = 0;\n    client.resetTime.setTime(now + this.windowMs);\n    return client;\n  }\n  /**\n   * Retrieves or creates a client, given a key. Also ensures that the client being\n   * returned is in the `current` map.\n   *\n   * @param key {string} - The key under which the client is (or is to be) stored.\n   *\n   * @returns {Client} - The requested client.\n   */\n  getClient(key) {\n    if (this.current.has(key)) return this.current.get(key);\n    let client;\n    if (this.previous.has(key)) {\n      client = this.previous.get(key);\n      this.previous.delete(key);\n    } else {\n      client = { totalHits: 0, resetTime: /* @__PURE__ */ new Date() };\n      this.resetClient(client);\n    }\n    this.current.set(key, client);\n    return client;\n  }\n  /**\n   * Move current clients to previous, create a new map for current.\n   *\n   * This function is called every `windowMs`.\n   */\n  clearExpired() {\n    this.previous = this.current;\n    this.current = /* @__PURE__ */ new Map();\n  }\n};\n\n// source/lib.ts\nvar isLegacyStore = (store) => (\n  // Check that `incr` exists but `increment` does not - store authors might want\n  // to keep both around for backwards compatibility.\n  typeof store.incr === \"function\" && typeof store.increment !== \"function\"\n);\nvar promisifyStore = (passedStore) => {\n  if (!isLegacyStore(passedStore)) {\n    return passedStore;\n  }\n  const legacyStore = passedStore;\n  class PromisifiedStore {\n    async increment(key) {\n      return new Promise((resolve, reject) => {\n        legacyStore.incr(\n          key,\n          (error, totalHits, resetTime) => {\n            if (error) reject(error);\n            resolve({ totalHits, resetTime });\n          }\n        );\n      });\n    }\n    async decrement(key) {\n      return legacyStore.decrement(key);\n    }\n    async resetKey(key) {\n      return legacyStore.resetKey(key);\n    }\n    /* istanbul ignore next */\n    async resetAll() {\n      if (typeof legacyStore.resetAll === \"function\")\n        return legacyStore.resetAll();\n    }\n  }\n  return new PromisifiedStore();\n};\nvar getOptionsFromConfig = (config) => {\n  const { validations: validations2, ...directlyPassableEntries } = config;\n  return {\n    ...directlyPassableEntries,\n    validate: validations2.enabled\n  };\n};\nvar omitUndefinedOptions = (passedOptions) => {\n  const omittedOptions = {};\n  for (const k of Object.keys(passedOptions)) {\n    const key = k;\n    if (passedOptions[key] !== void 0) {\n      omittedOptions[key] = passedOptions[key];\n    }\n  }\n  return omittedOptions;\n};\nvar parseOptions = (passedOptions) => {\n  const notUndefinedOptions = omitUndefinedOptions(passedOptions);\n  const validations2 = getValidations(notUndefinedOptions?.validate ?? true);\n  validations2.validationsConfig();\n  validations2.draftPolliHeaders(\n    // @ts-expect-error see the note above.\n    notUndefinedOptions.draft_polli_ratelimit_headers\n  );\n  validations2.onLimitReached(notUndefinedOptions.onLimitReached);\n  let standardHeaders = notUndefinedOptions.standardHeaders ?? false;\n  if (standardHeaders === true) standardHeaders = \"draft-6\";\n  const config = {\n    windowMs: 60 * 1e3,\n    limit: passedOptions.max ?? 5,\n    // `max` is deprecated, but support it anyways.\n    message: \"Too many requests, please try again later.\",\n    statusCode: 429,\n    legacyHeaders: passedOptions.headers ?? true,\n    identifier(request, _response) {\n      let duration = \"\";\n      const property = config.requestPropertyName;\n      const { limit } = request[property];\n      const seconds = config.windowMs / 1e3;\n      const minutes = config.windowMs / (1e3 * 60);\n      const hours = config.windowMs / (1e3 * 60 * 60);\n      const days = config.windowMs / (1e3 * 60 * 60 * 24);\n      if (seconds < 60) duration = `${seconds}sec`;\n      else if (minutes < 60) duration = `${minutes}min`;\n      else if (hours < 24) duration = `${hours}hr${hours > 1 ? \"s\" : \"\"}`;\n      else duration = `${days}day${days > 1 ? \"s\" : \"\"}`;\n      return `${limit}-in-${duration}`;\n    },\n    requestPropertyName: \"rateLimit\",\n    skipFailedRequests: false,\n    skipSuccessfulRequests: false,\n    requestWasSuccessful: (_request, response) => response.statusCode < 400,\n    skip: (_request, _response) => false,\n    keyGenerator(request, _response) {\n      validations2.ip(request.ip);\n      validations2.trustProxy(request);\n      validations2.xForwardedForHeader(request);\n      return request.ip;\n    },\n    async handler(request, response, _next, _optionsUsed) {\n      response.status(config.statusCode);\n      const message = typeof config.message === \"function\" ? await config.message(\n        request,\n        response\n      ) : config.message;\n      if (!response.writableEnded) {\n        response.send(message);\n      }\n    },\n    passOnStoreError: false,\n    // Allow the default options to be overridden by the passed options.\n    ...notUndefinedOptions,\n    // `standardHeaders` is resolved into a draft version above, use that.\n    standardHeaders,\n    // Note that this field is declared after the user's options are spread in,\n    // so that this field doesn't get overridden with an un-promisified store!\n    store: promisifyStore(notUndefinedOptions.store ?? new MemoryStore()),\n    // Print an error to the console if a few known misconfigurations are detected.\n    validations: validations2\n  };\n  if (typeof config.store.increment !== \"function\" || typeof config.store.decrement !== \"function\" || typeof config.store.resetKey !== \"function\" || config.store.resetAll !== void 0 && typeof config.store.resetAll !== \"function\" || config.store.init !== void 0 && typeof config.store.init !== \"function\") {\n    throw new TypeError(\n      \"An invalid store was passed. Please ensure that the store is a class that implements the `Store` interface.\"\n    );\n  }\n  return config;\n};\nvar handleAsyncErrors = (fn) => async (request, response, next) => {\n  try {\n    await Promise.resolve(fn(request, response, next)).catch(next);\n  } catch (error) {\n    next(error);\n  }\n};\nvar rateLimit = (passedOptions) => {\n  const config = parseOptions(passedOptions ?? {});\n  const options = getOptionsFromConfig(config);\n  config.validations.creationStack(config.store);\n  config.validations.unsharedStore(config.store);\n  if (typeof config.store.init === \"function\") config.store.init(options);\n  const middleware = handleAsyncErrors(\n    async (request, response, next) => {\n      const skip = await config.skip(request, response);\n      if (skip) {\n        next();\n        return;\n      }\n      const augmentedRequest = request;\n      const key = await config.keyGenerator(request, response);\n      let totalHits = 0;\n      let resetTime;\n      try {\n        const incrementResult = await config.store.increment(key);\n        totalHits = incrementResult.totalHits;\n        resetTime = incrementResult.resetTime;\n      } catch (error) {\n        if (config.passOnStoreError) {\n          console.error(\n            \"express-rate-limit: error from store, allowing request without rate-limiting.\",\n            error\n          );\n          next();\n          return;\n        }\n        throw error;\n      }\n      config.validations.positiveHits(totalHits);\n      config.validations.singleCount(request, config.store, key);\n      const retrieveLimit = typeof config.limit === \"function\" ? config.limit(request, response) : config.limit;\n      const limit = await retrieveLimit;\n      config.validations.limit(limit);\n      const info = {\n        limit,\n        used: totalHits,\n        remaining: Math.max(limit - totalHits, 0),\n        resetTime\n      };\n      Object.defineProperty(info, \"current\", {\n        configurable: false,\n        enumerable: false,\n        value: totalHits\n      });\n      augmentedRequest[config.requestPropertyName] = info;\n      if (config.legacyHeaders && !response.headersSent) {\n        setLegacyHeaders(response, info);\n      }\n      if (config.standardHeaders && !response.headersSent) {\n        switch (config.standardHeaders) {\n          case \"draft-6\": {\n            setDraft6Headers(response, info, config.windowMs);\n            break;\n          }\n          case \"draft-7\": {\n            config.validations.headersResetTime(info.resetTime);\n            setDraft7Headers(response, info, config.windowMs);\n            break;\n          }\n          case \"draft-8\": {\n            const retrieveName = typeof config.identifier === \"function\" ? config.identifier(request, response) : config.identifier;\n            const name = await retrieveName;\n            config.validations.headersResetTime(info.resetTime);\n            setDraft8Headers(response, info, config.windowMs, name, key);\n            break;\n          }\n          default: {\n            config.validations.headersDraftVersion(config.standardHeaders);\n            break;\n          }\n        }\n      }\n      if (config.skipFailedRequests || config.skipSuccessfulRequests) {\n        let decremented = false;\n        const decrementKey = async () => {\n          if (!decremented) {\n            await config.store.decrement(key);\n            decremented = true;\n          }\n        };\n        if (config.skipFailedRequests) {\n          response.on(\"finish\", async () => {\n            if (!await config.requestWasSuccessful(request, response))\n              await decrementKey();\n          });\n          response.on(\"close\", async () => {\n            if (!response.writableEnded) await decrementKey();\n          });\n          response.on(\"error\", async () => {\n            await decrementKey();\n          });\n        }\n        if (config.skipSuccessfulRequests) {\n          response.on(\"finish\", async () => {\n            if (await config.requestWasSuccessful(request, response))\n              await decrementKey();\n          });\n        }\n      }\n      config.validations.disable();\n      if (totalHits > limit) {\n        if (config.legacyHeaders || config.standardHeaders) {\n          setRetryAfterHeader(response, info, config.windowMs);\n        }\n        config.handler(request, response, next, options);\n        return;\n      }\n      next();\n    }\n  );\n  const getThrowFn = () => {\n    throw new Error(\"The current store does not support the get/getKey method\");\n  };\n  middleware.resetKey = config.store.resetKey.bind(config.store);\n  middleware.getKey = typeof config.store.get === \"function\" ? config.store.get.bind(config.store) : getThrowFn;\n  return middleware;\n};\nvar lib_default = rateLimit;\nexport {\n  MemoryStore,\n  lib_default as default,\n  lib_default as rateLimit\n};\n"],
  "mappings": "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",
  "names": []
}
